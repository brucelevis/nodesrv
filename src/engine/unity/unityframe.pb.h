// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: unityframe.proto

#ifndef PROTOBUF_unityframe_2eproto__INCLUDED
#define PROTOBUF_unityframe_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace unity {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_unityframe_2eproto();
void protobuf_AssignDesc_unityframe_2eproto();
void protobuf_ShutdownFile_unityframe_2eproto();

class Vector3;
class RorateAction;
class ScaleAction;
class MoveAction;
class DestroyAction;
class InstantiateAction;
class PlayAnimAction;
class StopAnimAction;
class FRAME;

// ===================================================================

class Vector3 : public ::google::protobuf::Message {
 public:
  Vector3();
  virtual ~Vector3();

  Vector3(const Vector3& from);

  inline Vector3& operator=(const Vector3& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector3& default_instance();

  void Swap(Vector3* other);

  // implements Message ----------------------------------------------

  Vector3* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vector3& from);
  void MergeFrom(const Vector3& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float x = 1 [default = 0];
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // optional float y = 2 [default = 0];
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // optional float z = 3 [default = 0];
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline float z() const;
  inline void set_z(float value);

  // @@protoc_insertion_point(class_scope:unity.Vector3)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float x_;
  float y_;
  float z_;
  friend void  protobuf_AddDesc_unityframe_2eproto();
  friend void protobuf_AssignDesc_unityframe_2eproto();
  friend void protobuf_ShutdownFile_unityframe_2eproto();

  void InitAsDefaultInstance();
  static Vector3* default_instance_;
};
// -------------------------------------------------------------------

class RorateAction : public ::google::protobuf::Message {
 public:
  RorateAction();
  virtual ~RorateAction();

  RorateAction(const RorateAction& from);

  inline RorateAction& operator=(const RorateAction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RorateAction& default_instance();

  void Swap(RorateAction* other);

  // implements Message ----------------------------------------------

  RorateAction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RorateAction& from);
  void MergeFrom(const RorateAction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 objectid = 1 [default = 0];
  inline bool has_objectid() const;
  inline void clear_objectid();
  static const int kObjectidFieldNumber = 1;
  inline ::google::protobuf::int32 objectid() const;
  inline void set_objectid(::google::protobuf::int32 value);

  // optional .unity.Vector3 src_rorate = 2;
  inline bool has_src_rorate() const;
  inline void clear_src_rorate();
  static const int kSrcRorateFieldNumber = 2;
  inline const ::unity::Vector3& src_rorate() const;
  inline ::unity::Vector3* mutable_src_rorate();
  inline ::unity::Vector3* release_src_rorate();
  inline void set_allocated_src_rorate(::unity::Vector3* src_rorate);

  // optional .unity.Vector3 dst_rorate = 3;
  inline bool has_dst_rorate() const;
  inline void clear_dst_rorate();
  static const int kDstRorateFieldNumber = 3;
  inline const ::unity::Vector3& dst_rorate() const;
  inline ::unity::Vector3* mutable_dst_rorate();
  inline ::unity::Vector3* release_dst_rorate();
  inline void set_allocated_dst_rorate(::unity::Vector3* dst_rorate);

  // @@protoc_insertion_point(class_scope:unity.RorateAction)
 private:
  inline void set_has_objectid();
  inline void clear_has_objectid();
  inline void set_has_src_rorate();
  inline void clear_has_src_rorate();
  inline void set_has_dst_rorate();
  inline void clear_has_dst_rorate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::unity::Vector3* src_rorate_;
  ::unity::Vector3* dst_rorate_;
  ::google::protobuf::int32 objectid_;
  friend void  protobuf_AddDesc_unityframe_2eproto();
  friend void protobuf_AssignDesc_unityframe_2eproto();
  friend void protobuf_ShutdownFile_unityframe_2eproto();

  void InitAsDefaultInstance();
  static RorateAction* default_instance_;
};
// -------------------------------------------------------------------

class ScaleAction : public ::google::protobuf::Message {
 public:
  ScaleAction();
  virtual ~ScaleAction();

  ScaleAction(const ScaleAction& from);

  inline ScaleAction& operator=(const ScaleAction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ScaleAction& default_instance();

  void Swap(ScaleAction* other);

  // implements Message ----------------------------------------------

  ScaleAction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ScaleAction& from);
  void MergeFrom(const ScaleAction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 objectid = 1 [default = 0];
  inline bool has_objectid() const;
  inline void clear_objectid();
  static const int kObjectidFieldNumber = 1;
  inline ::google::protobuf::int32 objectid() const;
  inline void set_objectid(::google::protobuf::int32 value);

  // optional .unity.Vector3 src_scale = 2;
  inline bool has_src_scale() const;
  inline void clear_src_scale();
  static const int kSrcScaleFieldNumber = 2;
  inline const ::unity::Vector3& src_scale() const;
  inline ::unity::Vector3* mutable_src_scale();
  inline ::unity::Vector3* release_src_scale();
  inline void set_allocated_src_scale(::unity::Vector3* src_scale);

  // optional .unity.Vector3 dst_scale = 3;
  inline bool has_dst_scale() const;
  inline void clear_dst_scale();
  static const int kDstScaleFieldNumber = 3;
  inline const ::unity::Vector3& dst_scale() const;
  inline ::unity::Vector3* mutable_dst_scale();
  inline ::unity::Vector3* release_dst_scale();
  inline void set_allocated_dst_scale(::unity::Vector3* dst_scale);

  // @@protoc_insertion_point(class_scope:unity.ScaleAction)
 private:
  inline void set_has_objectid();
  inline void clear_has_objectid();
  inline void set_has_src_scale();
  inline void clear_has_src_scale();
  inline void set_has_dst_scale();
  inline void clear_has_dst_scale();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::unity::Vector3* src_scale_;
  ::unity::Vector3* dst_scale_;
  ::google::protobuf::int32 objectid_;
  friend void  protobuf_AddDesc_unityframe_2eproto();
  friend void protobuf_AssignDesc_unityframe_2eproto();
  friend void protobuf_ShutdownFile_unityframe_2eproto();

  void InitAsDefaultInstance();
  static ScaleAction* default_instance_;
};
// -------------------------------------------------------------------

class MoveAction : public ::google::protobuf::Message {
 public:
  MoveAction();
  virtual ~MoveAction();

  MoveAction(const MoveAction& from);

  inline MoveAction& operator=(const MoveAction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MoveAction& default_instance();

  void Swap(MoveAction* other);

  // implements Message ----------------------------------------------

  MoveAction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MoveAction& from);
  void MergeFrom(const MoveAction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 objectid = 1 [default = 0];
  inline bool has_objectid() const;
  inline void clear_objectid();
  static const int kObjectidFieldNumber = 1;
  inline ::google::protobuf::int32 objectid() const;
  inline void set_objectid(::google::protobuf::int32 value);

  // optional .unity.Vector3 src_position = 2;
  inline bool has_src_position() const;
  inline void clear_src_position();
  static const int kSrcPositionFieldNumber = 2;
  inline const ::unity::Vector3& src_position() const;
  inline ::unity::Vector3* mutable_src_position();
  inline ::unity::Vector3* release_src_position();
  inline void set_allocated_src_position(::unity::Vector3* src_position);

  // optional .unity.Vector3 dst_position = 3;
  inline bool has_dst_position() const;
  inline void clear_dst_position();
  static const int kDstPositionFieldNumber = 3;
  inline const ::unity::Vector3& dst_position() const;
  inline ::unity::Vector3* mutable_dst_position();
  inline ::unity::Vector3* release_dst_position();
  inline void set_allocated_dst_position(::unity::Vector3* dst_position);

  // @@protoc_insertion_point(class_scope:unity.MoveAction)
 private:
  inline void set_has_objectid();
  inline void clear_has_objectid();
  inline void set_has_src_position();
  inline void clear_has_src_position();
  inline void set_has_dst_position();
  inline void clear_has_dst_position();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::unity::Vector3* src_position_;
  ::unity::Vector3* dst_position_;
  ::google::protobuf::int32 objectid_;
  friend void  protobuf_AddDesc_unityframe_2eproto();
  friend void protobuf_AssignDesc_unityframe_2eproto();
  friend void protobuf_ShutdownFile_unityframe_2eproto();

  void InitAsDefaultInstance();
  static MoveAction* default_instance_;
};
// -------------------------------------------------------------------

class DestroyAction : public ::google::protobuf::Message {
 public:
  DestroyAction();
  virtual ~DestroyAction();

  DestroyAction(const DestroyAction& from);

  inline DestroyAction& operator=(const DestroyAction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DestroyAction& default_instance();

  void Swap(DestroyAction* other);

  // implements Message ----------------------------------------------

  DestroyAction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DestroyAction& from);
  void MergeFrom(const DestroyAction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 objectid = 1 [default = 0];
  inline bool has_objectid() const;
  inline void clear_objectid();
  static const int kObjectidFieldNumber = 1;
  inline ::google::protobuf::int32 objectid() const;
  inline void set_objectid(::google::protobuf::int32 value);

  // optional int32 delay = 2 [default = 0];
  inline bool has_delay() const;
  inline void clear_delay();
  static const int kDelayFieldNumber = 2;
  inline ::google::protobuf::int32 delay() const;
  inline void set_delay(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:unity.DestroyAction)
 private:
  inline void set_has_objectid();
  inline void clear_has_objectid();
  inline void set_has_delay();
  inline void clear_has_delay();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 objectid_;
  ::google::protobuf::int32 delay_;
  friend void  protobuf_AddDesc_unityframe_2eproto();
  friend void protobuf_AssignDesc_unityframe_2eproto();
  friend void protobuf_ShutdownFile_unityframe_2eproto();

  void InitAsDefaultInstance();
  static DestroyAction* default_instance_;
};
// -------------------------------------------------------------------

class InstantiateAction : public ::google::protobuf::Message {
 public:
  InstantiateAction();
  virtual ~InstantiateAction();

  InstantiateAction(const InstantiateAction& from);

  inline InstantiateAction& operator=(const InstantiateAction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InstantiateAction& default_instance();

  void Swap(InstantiateAction* other);

  // implements Message ----------------------------------------------

  InstantiateAction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InstantiateAction& from);
  void MergeFrom(const InstantiateAction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 objectid = 1 [default = 0];
  inline bool has_objectid() const;
  inline void clear_objectid();
  static const int kObjectidFieldNumber = 1;
  inline ::google::protobuf::int32 objectid() const;
  inline void set_objectid(::google::protobuf::int32 value);

  // optional string prefab = 2;
  inline bool has_prefab() const;
  inline void clear_prefab();
  static const int kPrefabFieldNumber = 2;
  inline const ::std::string& prefab() const;
  inline void set_prefab(const ::std::string& value);
  inline void set_prefab(const char* value);
  inline void set_prefab(const char* value, size_t size);
  inline ::std::string* mutable_prefab();
  inline ::std::string* release_prefab();
  inline void set_allocated_prefab(::std::string* prefab);

  // optional string objname = 3;
  inline bool has_objname() const;
  inline void clear_objname();
  static const int kObjnameFieldNumber = 3;
  inline const ::std::string& objname() const;
  inline void set_objname(const ::std::string& value);
  inline void set_objname(const char* value);
  inline void set_objname(const char* value, size_t size);
  inline ::std::string* mutable_objname();
  inline ::std::string* release_objname();
  inline void set_allocated_objname(::std::string* objname);

  // @@protoc_insertion_point(class_scope:unity.InstantiateAction)
 private:
  inline void set_has_objectid();
  inline void clear_has_objectid();
  inline void set_has_prefab();
  inline void clear_has_prefab();
  inline void set_has_objname();
  inline void clear_has_objname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* prefab_;
  ::std::string* objname_;
  ::google::protobuf::int32 objectid_;
  friend void  protobuf_AddDesc_unityframe_2eproto();
  friend void protobuf_AssignDesc_unityframe_2eproto();
  friend void protobuf_ShutdownFile_unityframe_2eproto();

  void InitAsDefaultInstance();
  static InstantiateAction* default_instance_;
};
// -------------------------------------------------------------------

class PlayAnimAction : public ::google::protobuf::Message {
 public:
  PlayAnimAction();
  virtual ~PlayAnimAction();

  PlayAnimAction(const PlayAnimAction& from);

  inline PlayAnimAction& operator=(const PlayAnimAction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayAnimAction& default_instance();

  void Swap(PlayAnimAction* other);

  // implements Message ----------------------------------------------

  PlayAnimAction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayAnimAction& from);
  void MergeFrom(const PlayAnimAction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 objectid = 1 [default = 0];
  inline bool has_objectid() const;
  inline void clear_objectid();
  static const int kObjectidFieldNumber = 1;
  inline ::google::protobuf::int32 objectid() const;
  inline void set_objectid(::google::protobuf::int32 value);

  // optional string animname = 2;
  inline bool has_animname() const;
  inline void clear_animname();
  static const int kAnimnameFieldNumber = 2;
  inline const ::std::string& animname() const;
  inline void set_animname(const ::std::string& value);
  inline void set_animname(const char* value);
  inline void set_animname(const char* value, size_t size);
  inline ::std::string* mutable_animname();
  inline ::std::string* release_animname();
  inline void set_allocated_animname(::std::string* animname);

  // @@protoc_insertion_point(class_scope:unity.PlayAnimAction)
 private:
  inline void set_has_objectid();
  inline void clear_has_objectid();
  inline void set_has_animname();
  inline void clear_has_animname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* animname_;
  ::google::protobuf::int32 objectid_;
  friend void  protobuf_AddDesc_unityframe_2eproto();
  friend void protobuf_AssignDesc_unityframe_2eproto();
  friend void protobuf_ShutdownFile_unityframe_2eproto();

  void InitAsDefaultInstance();
  static PlayAnimAction* default_instance_;
};
// -------------------------------------------------------------------

class StopAnimAction : public ::google::protobuf::Message {
 public:
  StopAnimAction();
  virtual ~StopAnimAction();

  StopAnimAction(const StopAnimAction& from);

  inline StopAnimAction& operator=(const StopAnimAction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StopAnimAction& default_instance();

  void Swap(StopAnimAction* other);

  // implements Message ----------------------------------------------

  StopAnimAction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StopAnimAction& from);
  void MergeFrom(const StopAnimAction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 objectid = 1 [default = 0];
  inline bool has_objectid() const;
  inline void clear_objectid();
  static const int kObjectidFieldNumber = 1;
  inline ::google::protobuf::int32 objectid() const;
  inline void set_objectid(::google::protobuf::int32 value);

  // optional string animname = 2;
  inline bool has_animname() const;
  inline void clear_animname();
  static const int kAnimnameFieldNumber = 2;
  inline const ::std::string& animname() const;
  inline void set_animname(const ::std::string& value);
  inline void set_animname(const char* value);
  inline void set_animname(const char* value, size_t size);
  inline ::std::string* mutable_animname();
  inline ::std::string* release_animname();
  inline void set_allocated_animname(::std::string* animname);

  // @@protoc_insertion_point(class_scope:unity.StopAnimAction)
 private:
  inline void set_has_objectid();
  inline void clear_has_objectid();
  inline void set_has_animname();
  inline void clear_has_animname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* animname_;
  ::google::protobuf::int32 objectid_;
  friend void  protobuf_AddDesc_unityframe_2eproto();
  friend void protobuf_AssignDesc_unityframe_2eproto();
  friend void protobuf_ShutdownFile_unityframe_2eproto();

  void InitAsDefaultInstance();
  static StopAnimAction* default_instance_;
};
// -------------------------------------------------------------------

class FRAME : public ::google::protobuf::Message {
 public:
  FRAME();
  virtual ~FRAME();

  FRAME(const FRAME& from);

  inline FRAME& operator=(const FRAME& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FRAME& default_instance();

  void Swap(FRAME* other);

  // implements Message ----------------------------------------------

  FRAME* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FRAME& from);
  void MergeFrom(const FRAME& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 frame = 1 [default = 0];
  inline bool has_frame() const;
  inline void clear_frame();
  static const int kFrameFieldNumber = 1;
  inline ::google::protobuf::int32 frame() const;
  inline void set_frame(::google::protobuf::int32 value);

  // optional int32 detal = 2 [default = 0];
  inline bool has_detal() const;
  inline void clear_detal();
  static const int kDetalFieldNumber = 2;
  inline ::google::protobuf::int32 detal() const;
  inline void set_detal(::google::protobuf::int32 value);

  // repeated .unity.MoveAction move = 3;
  inline int move_size() const;
  inline void clear_move();
  static const int kMoveFieldNumber = 3;
  inline const ::unity::MoveAction& move(int index) const;
  inline ::unity::MoveAction* mutable_move(int index);
  inline ::unity::MoveAction* add_move();
  inline const ::google::protobuf::RepeatedPtrField< ::unity::MoveAction >&
      move() const;
  inline ::google::protobuf::RepeatedPtrField< ::unity::MoveAction >*
      mutable_move();

  // repeated .unity.InstantiateAction instantiate = 4;
  inline int instantiate_size() const;
  inline void clear_instantiate();
  static const int kInstantiateFieldNumber = 4;
  inline const ::unity::InstantiateAction& instantiate(int index) const;
  inline ::unity::InstantiateAction* mutable_instantiate(int index);
  inline ::unity::InstantiateAction* add_instantiate();
  inline const ::google::protobuf::RepeatedPtrField< ::unity::InstantiateAction >&
      instantiate() const;
  inline ::google::protobuf::RepeatedPtrField< ::unity::InstantiateAction >*
      mutable_instantiate();

  // repeated .unity.DestroyAction destroy = 5;
  inline int destroy_size() const;
  inline void clear_destroy();
  static const int kDestroyFieldNumber = 5;
  inline const ::unity::DestroyAction& destroy(int index) const;
  inline ::unity::DestroyAction* mutable_destroy(int index);
  inline ::unity::DestroyAction* add_destroy();
  inline const ::google::protobuf::RepeatedPtrField< ::unity::DestroyAction >&
      destroy() const;
  inline ::google::protobuf::RepeatedPtrField< ::unity::DestroyAction >*
      mutable_destroy();

  // repeated .unity.ScaleAction scale = 6;
  inline int scale_size() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 6;
  inline const ::unity::ScaleAction& scale(int index) const;
  inline ::unity::ScaleAction* mutable_scale(int index);
  inline ::unity::ScaleAction* add_scale();
  inline const ::google::protobuf::RepeatedPtrField< ::unity::ScaleAction >&
      scale() const;
  inline ::google::protobuf::RepeatedPtrField< ::unity::ScaleAction >*
      mutable_scale();

  // repeated .unity.RorateAction rorate = 7;
  inline int rorate_size() const;
  inline void clear_rorate();
  static const int kRorateFieldNumber = 7;
  inline const ::unity::RorateAction& rorate(int index) const;
  inline ::unity::RorateAction* mutable_rorate(int index);
  inline ::unity::RorateAction* add_rorate();
  inline const ::google::protobuf::RepeatedPtrField< ::unity::RorateAction >&
      rorate() const;
  inline ::google::protobuf::RepeatedPtrField< ::unity::RorateAction >*
      mutable_rorate();

  // repeated .unity.PlayAnimAction play_anim = 8;
  inline int play_anim_size() const;
  inline void clear_play_anim();
  static const int kPlayAnimFieldNumber = 8;
  inline const ::unity::PlayAnimAction& play_anim(int index) const;
  inline ::unity::PlayAnimAction* mutable_play_anim(int index);
  inline ::unity::PlayAnimAction* add_play_anim();
  inline const ::google::protobuf::RepeatedPtrField< ::unity::PlayAnimAction >&
      play_anim() const;
  inline ::google::protobuf::RepeatedPtrField< ::unity::PlayAnimAction >*
      mutable_play_anim();

  // repeated .unity.StopAnimAction stop_anim = 9;
  inline int stop_anim_size() const;
  inline void clear_stop_anim();
  static const int kStopAnimFieldNumber = 9;
  inline const ::unity::StopAnimAction& stop_anim(int index) const;
  inline ::unity::StopAnimAction* mutable_stop_anim(int index);
  inline ::unity::StopAnimAction* add_stop_anim();
  inline const ::google::protobuf::RepeatedPtrField< ::unity::StopAnimAction >&
      stop_anim() const;
  inline ::google::protobuf::RepeatedPtrField< ::unity::StopAnimAction >*
      mutable_stop_anim();

  // @@protoc_insertion_point(class_scope:unity.FRAME)
 private:
  inline void set_has_frame();
  inline void clear_has_frame();
  inline void set_has_detal();
  inline void clear_has_detal();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 frame_;
  ::google::protobuf::int32 detal_;
  ::google::protobuf::RepeatedPtrField< ::unity::MoveAction > move_;
  ::google::protobuf::RepeatedPtrField< ::unity::InstantiateAction > instantiate_;
  ::google::protobuf::RepeatedPtrField< ::unity::DestroyAction > destroy_;
  ::google::protobuf::RepeatedPtrField< ::unity::ScaleAction > scale_;
  ::google::protobuf::RepeatedPtrField< ::unity::RorateAction > rorate_;
  ::google::protobuf::RepeatedPtrField< ::unity::PlayAnimAction > play_anim_;
  ::google::protobuf::RepeatedPtrField< ::unity::StopAnimAction > stop_anim_;
  friend void  protobuf_AddDesc_unityframe_2eproto();
  friend void protobuf_AssignDesc_unityframe_2eproto();
  friend void protobuf_ShutdownFile_unityframe_2eproto();

  void InitAsDefaultInstance();
  static FRAME* default_instance_;
};
// ===================================================================


// ===================================================================

// Vector3

// optional float x = 1 [default = 0];
inline bool Vector3::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vector3::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vector3::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vector3::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Vector3::x() const {
  // @@protoc_insertion_point(field_get:unity.Vector3.x)
  return x_;
}
inline void Vector3::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:unity.Vector3.x)
}

// optional float y = 2 [default = 0];
inline bool Vector3::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vector3::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Vector3::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Vector3::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Vector3::y() const {
  // @@protoc_insertion_point(field_get:unity.Vector3.y)
  return y_;
}
inline void Vector3::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:unity.Vector3.y)
}

// optional float z = 3 [default = 0];
inline bool Vector3::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Vector3::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Vector3::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Vector3::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float Vector3::z() const {
  // @@protoc_insertion_point(field_get:unity.Vector3.z)
  return z_;
}
inline void Vector3::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:unity.Vector3.z)
}

// -------------------------------------------------------------------

// RorateAction

// optional int32 objectid = 1 [default = 0];
inline bool RorateAction::has_objectid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RorateAction::set_has_objectid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RorateAction::clear_has_objectid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RorateAction::clear_objectid() {
  objectid_ = 0;
  clear_has_objectid();
}
inline ::google::protobuf::int32 RorateAction::objectid() const {
  // @@protoc_insertion_point(field_get:unity.RorateAction.objectid)
  return objectid_;
}
inline void RorateAction::set_objectid(::google::protobuf::int32 value) {
  set_has_objectid();
  objectid_ = value;
  // @@protoc_insertion_point(field_set:unity.RorateAction.objectid)
}

// optional .unity.Vector3 src_rorate = 2;
inline bool RorateAction::has_src_rorate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RorateAction::set_has_src_rorate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RorateAction::clear_has_src_rorate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RorateAction::clear_src_rorate() {
  if (src_rorate_ != NULL) src_rorate_->::unity::Vector3::Clear();
  clear_has_src_rorate();
}
inline const ::unity::Vector3& RorateAction::src_rorate() const {
  // @@protoc_insertion_point(field_get:unity.RorateAction.src_rorate)
  return src_rorate_ != NULL ? *src_rorate_ : *default_instance_->src_rorate_;
}
inline ::unity::Vector3* RorateAction::mutable_src_rorate() {
  set_has_src_rorate();
  if (src_rorate_ == NULL) src_rorate_ = new ::unity::Vector3;
  // @@protoc_insertion_point(field_mutable:unity.RorateAction.src_rorate)
  return src_rorate_;
}
inline ::unity::Vector3* RorateAction::release_src_rorate() {
  clear_has_src_rorate();
  ::unity::Vector3* temp = src_rorate_;
  src_rorate_ = NULL;
  return temp;
}
inline void RorateAction::set_allocated_src_rorate(::unity::Vector3* src_rorate) {
  delete src_rorate_;
  src_rorate_ = src_rorate;
  if (src_rorate) {
    set_has_src_rorate();
  } else {
    clear_has_src_rorate();
  }
  // @@protoc_insertion_point(field_set_allocated:unity.RorateAction.src_rorate)
}

// optional .unity.Vector3 dst_rorate = 3;
inline bool RorateAction::has_dst_rorate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RorateAction::set_has_dst_rorate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RorateAction::clear_has_dst_rorate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RorateAction::clear_dst_rorate() {
  if (dst_rorate_ != NULL) dst_rorate_->::unity::Vector3::Clear();
  clear_has_dst_rorate();
}
inline const ::unity::Vector3& RorateAction::dst_rorate() const {
  // @@protoc_insertion_point(field_get:unity.RorateAction.dst_rorate)
  return dst_rorate_ != NULL ? *dst_rorate_ : *default_instance_->dst_rorate_;
}
inline ::unity::Vector3* RorateAction::mutable_dst_rorate() {
  set_has_dst_rorate();
  if (dst_rorate_ == NULL) dst_rorate_ = new ::unity::Vector3;
  // @@protoc_insertion_point(field_mutable:unity.RorateAction.dst_rorate)
  return dst_rorate_;
}
inline ::unity::Vector3* RorateAction::release_dst_rorate() {
  clear_has_dst_rorate();
  ::unity::Vector3* temp = dst_rorate_;
  dst_rorate_ = NULL;
  return temp;
}
inline void RorateAction::set_allocated_dst_rorate(::unity::Vector3* dst_rorate) {
  delete dst_rorate_;
  dst_rorate_ = dst_rorate;
  if (dst_rorate) {
    set_has_dst_rorate();
  } else {
    clear_has_dst_rorate();
  }
  // @@protoc_insertion_point(field_set_allocated:unity.RorateAction.dst_rorate)
}

// -------------------------------------------------------------------

// ScaleAction

// optional int32 objectid = 1 [default = 0];
inline bool ScaleAction::has_objectid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScaleAction::set_has_objectid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ScaleAction::clear_has_objectid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ScaleAction::clear_objectid() {
  objectid_ = 0;
  clear_has_objectid();
}
inline ::google::protobuf::int32 ScaleAction::objectid() const {
  // @@protoc_insertion_point(field_get:unity.ScaleAction.objectid)
  return objectid_;
}
inline void ScaleAction::set_objectid(::google::protobuf::int32 value) {
  set_has_objectid();
  objectid_ = value;
  // @@protoc_insertion_point(field_set:unity.ScaleAction.objectid)
}

// optional .unity.Vector3 src_scale = 2;
inline bool ScaleAction::has_src_scale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ScaleAction::set_has_src_scale() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ScaleAction::clear_has_src_scale() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ScaleAction::clear_src_scale() {
  if (src_scale_ != NULL) src_scale_->::unity::Vector3::Clear();
  clear_has_src_scale();
}
inline const ::unity::Vector3& ScaleAction::src_scale() const {
  // @@protoc_insertion_point(field_get:unity.ScaleAction.src_scale)
  return src_scale_ != NULL ? *src_scale_ : *default_instance_->src_scale_;
}
inline ::unity::Vector3* ScaleAction::mutable_src_scale() {
  set_has_src_scale();
  if (src_scale_ == NULL) src_scale_ = new ::unity::Vector3;
  // @@protoc_insertion_point(field_mutable:unity.ScaleAction.src_scale)
  return src_scale_;
}
inline ::unity::Vector3* ScaleAction::release_src_scale() {
  clear_has_src_scale();
  ::unity::Vector3* temp = src_scale_;
  src_scale_ = NULL;
  return temp;
}
inline void ScaleAction::set_allocated_src_scale(::unity::Vector3* src_scale) {
  delete src_scale_;
  src_scale_ = src_scale;
  if (src_scale) {
    set_has_src_scale();
  } else {
    clear_has_src_scale();
  }
  // @@protoc_insertion_point(field_set_allocated:unity.ScaleAction.src_scale)
}

// optional .unity.Vector3 dst_scale = 3;
inline bool ScaleAction::has_dst_scale() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ScaleAction::set_has_dst_scale() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ScaleAction::clear_has_dst_scale() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ScaleAction::clear_dst_scale() {
  if (dst_scale_ != NULL) dst_scale_->::unity::Vector3::Clear();
  clear_has_dst_scale();
}
inline const ::unity::Vector3& ScaleAction::dst_scale() const {
  // @@protoc_insertion_point(field_get:unity.ScaleAction.dst_scale)
  return dst_scale_ != NULL ? *dst_scale_ : *default_instance_->dst_scale_;
}
inline ::unity::Vector3* ScaleAction::mutable_dst_scale() {
  set_has_dst_scale();
  if (dst_scale_ == NULL) dst_scale_ = new ::unity::Vector3;
  // @@protoc_insertion_point(field_mutable:unity.ScaleAction.dst_scale)
  return dst_scale_;
}
inline ::unity::Vector3* ScaleAction::release_dst_scale() {
  clear_has_dst_scale();
  ::unity::Vector3* temp = dst_scale_;
  dst_scale_ = NULL;
  return temp;
}
inline void ScaleAction::set_allocated_dst_scale(::unity::Vector3* dst_scale) {
  delete dst_scale_;
  dst_scale_ = dst_scale;
  if (dst_scale) {
    set_has_dst_scale();
  } else {
    clear_has_dst_scale();
  }
  // @@protoc_insertion_point(field_set_allocated:unity.ScaleAction.dst_scale)
}

// -------------------------------------------------------------------

// MoveAction

// optional int32 objectid = 1 [default = 0];
inline bool MoveAction::has_objectid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MoveAction::set_has_objectid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MoveAction::clear_has_objectid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MoveAction::clear_objectid() {
  objectid_ = 0;
  clear_has_objectid();
}
inline ::google::protobuf::int32 MoveAction::objectid() const {
  // @@protoc_insertion_point(field_get:unity.MoveAction.objectid)
  return objectid_;
}
inline void MoveAction::set_objectid(::google::protobuf::int32 value) {
  set_has_objectid();
  objectid_ = value;
  // @@protoc_insertion_point(field_set:unity.MoveAction.objectid)
}

// optional .unity.Vector3 src_position = 2;
inline bool MoveAction::has_src_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MoveAction::set_has_src_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MoveAction::clear_has_src_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MoveAction::clear_src_position() {
  if (src_position_ != NULL) src_position_->::unity::Vector3::Clear();
  clear_has_src_position();
}
inline const ::unity::Vector3& MoveAction::src_position() const {
  // @@protoc_insertion_point(field_get:unity.MoveAction.src_position)
  return src_position_ != NULL ? *src_position_ : *default_instance_->src_position_;
}
inline ::unity::Vector3* MoveAction::mutable_src_position() {
  set_has_src_position();
  if (src_position_ == NULL) src_position_ = new ::unity::Vector3;
  // @@protoc_insertion_point(field_mutable:unity.MoveAction.src_position)
  return src_position_;
}
inline ::unity::Vector3* MoveAction::release_src_position() {
  clear_has_src_position();
  ::unity::Vector3* temp = src_position_;
  src_position_ = NULL;
  return temp;
}
inline void MoveAction::set_allocated_src_position(::unity::Vector3* src_position) {
  delete src_position_;
  src_position_ = src_position;
  if (src_position) {
    set_has_src_position();
  } else {
    clear_has_src_position();
  }
  // @@protoc_insertion_point(field_set_allocated:unity.MoveAction.src_position)
}

// optional .unity.Vector3 dst_position = 3;
inline bool MoveAction::has_dst_position() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MoveAction::set_has_dst_position() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MoveAction::clear_has_dst_position() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MoveAction::clear_dst_position() {
  if (dst_position_ != NULL) dst_position_->::unity::Vector3::Clear();
  clear_has_dst_position();
}
inline const ::unity::Vector3& MoveAction::dst_position() const {
  // @@protoc_insertion_point(field_get:unity.MoveAction.dst_position)
  return dst_position_ != NULL ? *dst_position_ : *default_instance_->dst_position_;
}
inline ::unity::Vector3* MoveAction::mutable_dst_position() {
  set_has_dst_position();
  if (dst_position_ == NULL) dst_position_ = new ::unity::Vector3;
  // @@protoc_insertion_point(field_mutable:unity.MoveAction.dst_position)
  return dst_position_;
}
inline ::unity::Vector3* MoveAction::release_dst_position() {
  clear_has_dst_position();
  ::unity::Vector3* temp = dst_position_;
  dst_position_ = NULL;
  return temp;
}
inline void MoveAction::set_allocated_dst_position(::unity::Vector3* dst_position) {
  delete dst_position_;
  dst_position_ = dst_position;
  if (dst_position) {
    set_has_dst_position();
  } else {
    clear_has_dst_position();
  }
  // @@protoc_insertion_point(field_set_allocated:unity.MoveAction.dst_position)
}

// -------------------------------------------------------------------

// DestroyAction

// optional int32 objectid = 1 [default = 0];
inline bool DestroyAction::has_objectid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DestroyAction::set_has_objectid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DestroyAction::clear_has_objectid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DestroyAction::clear_objectid() {
  objectid_ = 0;
  clear_has_objectid();
}
inline ::google::protobuf::int32 DestroyAction::objectid() const {
  // @@protoc_insertion_point(field_get:unity.DestroyAction.objectid)
  return objectid_;
}
inline void DestroyAction::set_objectid(::google::protobuf::int32 value) {
  set_has_objectid();
  objectid_ = value;
  // @@protoc_insertion_point(field_set:unity.DestroyAction.objectid)
}

// optional int32 delay = 2 [default = 0];
inline bool DestroyAction::has_delay() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DestroyAction::set_has_delay() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DestroyAction::clear_has_delay() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DestroyAction::clear_delay() {
  delay_ = 0;
  clear_has_delay();
}
inline ::google::protobuf::int32 DestroyAction::delay() const {
  // @@protoc_insertion_point(field_get:unity.DestroyAction.delay)
  return delay_;
}
inline void DestroyAction::set_delay(::google::protobuf::int32 value) {
  set_has_delay();
  delay_ = value;
  // @@protoc_insertion_point(field_set:unity.DestroyAction.delay)
}

// -------------------------------------------------------------------

// InstantiateAction

// optional int32 objectid = 1 [default = 0];
inline bool InstantiateAction::has_objectid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InstantiateAction::set_has_objectid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InstantiateAction::clear_has_objectid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InstantiateAction::clear_objectid() {
  objectid_ = 0;
  clear_has_objectid();
}
inline ::google::protobuf::int32 InstantiateAction::objectid() const {
  // @@protoc_insertion_point(field_get:unity.InstantiateAction.objectid)
  return objectid_;
}
inline void InstantiateAction::set_objectid(::google::protobuf::int32 value) {
  set_has_objectid();
  objectid_ = value;
  // @@protoc_insertion_point(field_set:unity.InstantiateAction.objectid)
}

// optional string prefab = 2;
inline bool InstantiateAction::has_prefab() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InstantiateAction::set_has_prefab() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InstantiateAction::clear_has_prefab() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InstantiateAction::clear_prefab() {
  if (prefab_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    prefab_->clear();
  }
  clear_has_prefab();
}
inline const ::std::string& InstantiateAction::prefab() const {
  // @@protoc_insertion_point(field_get:unity.InstantiateAction.prefab)
  return *prefab_;
}
inline void InstantiateAction::set_prefab(const ::std::string& value) {
  set_has_prefab();
  if (prefab_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    prefab_ = new ::std::string;
  }
  prefab_->assign(value);
  // @@protoc_insertion_point(field_set:unity.InstantiateAction.prefab)
}
inline void InstantiateAction::set_prefab(const char* value) {
  set_has_prefab();
  if (prefab_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    prefab_ = new ::std::string;
  }
  prefab_->assign(value);
  // @@protoc_insertion_point(field_set_char:unity.InstantiateAction.prefab)
}
inline void InstantiateAction::set_prefab(const char* value, size_t size) {
  set_has_prefab();
  if (prefab_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    prefab_ = new ::std::string;
  }
  prefab_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:unity.InstantiateAction.prefab)
}
inline ::std::string* InstantiateAction::mutable_prefab() {
  set_has_prefab();
  if (prefab_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    prefab_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:unity.InstantiateAction.prefab)
  return prefab_;
}
inline ::std::string* InstantiateAction::release_prefab() {
  clear_has_prefab();
  if (prefab_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = prefab_;
    prefab_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void InstantiateAction::set_allocated_prefab(::std::string* prefab) {
  if (prefab_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete prefab_;
  }
  if (prefab) {
    set_has_prefab();
    prefab_ = prefab;
  } else {
    clear_has_prefab();
    prefab_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:unity.InstantiateAction.prefab)
}

// optional string objname = 3;
inline bool InstantiateAction::has_objname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InstantiateAction::set_has_objname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InstantiateAction::clear_has_objname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InstantiateAction::clear_objname() {
  if (objname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    objname_->clear();
  }
  clear_has_objname();
}
inline const ::std::string& InstantiateAction::objname() const {
  // @@protoc_insertion_point(field_get:unity.InstantiateAction.objname)
  return *objname_;
}
inline void InstantiateAction::set_objname(const ::std::string& value) {
  set_has_objname();
  if (objname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    objname_ = new ::std::string;
  }
  objname_->assign(value);
  // @@protoc_insertion_point(field_set:unity.InstantiateAction.objname)
}
inline void InstantiateAction::set_objname(const char* value) {
  set_has_objname();
  if (objname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    objname_ = new ::std::string;
  }
  objname_->assign(value);
  // @@protoc_insertion_point(field_set_char:unity.InstantiateAction.objname)
}
inline void InstantiateAction::set_objname(const char* value, size_t size) {
  set_has_objname();
  if (objname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    objname_ = new ::std::string;
  }
  objname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:unity.InstantiateAction.objname)
}
inline ::std::string* InstantiateAction::mutable_objname() {
  set_has_objname();
  if (objname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    objname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:unity.InstantiateAction.objname)
  return objname_;
}
inline ::std::string* InstantiateAction::release_objname() {
  clear_has_objname();
  if (objname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = objname_;
    objname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void InstantiateAction::set_allocated_objname(::std::string* objname) {
  if (objname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete objname_;
  }
  if (objname) {
    set_has_objname();
    objname_ = objname;
  } else {
    clear_has_objname();
    objname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:unity.InstantiateAction.objname)
}

// -------------------------------------------------------------------

// PlayAnimAction

// optional int32 objectid = 1 [default = 0];
inline bool PlayAnimAction::has_objectid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayAnimAction::set_has_objectid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayAnimAction::clear_has_objectid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayAnimAction::clear_objectid() {
  objectid_ = 0;
  clear_has_objectid();
}
inline ::google::protobuf::int32 PlayAnimAction::objectid() const {
  // @@protoc_insertion_point(field_get:unity.PlayAnimAction.objectid)
  return objectid_;
}
inline void PlayAnimAction::set_objectid(::google::protobuf::int32 value) {
  set_has_objectid();
  objectid_ = value;
  // @@protoc_insertion_point(field_set:unity.PlayAnimAction.objectid)
}

// optional string animname = 2;
inline bool PlayAnimAction::has_animname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayAnimAction::set_has_animname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayAnimAction::clear_has_animname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayAnimAction::clear_animname() {
  if (animname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    animname_->clear();
  }
  clear_has_animname();
}
inline const ::std::string& PlayAnimAction::animname() const {
  // @@protoc_insertion_point(field_get:unity.PlayAnimAction.animname)
  return *animname_;
}
inline void PlayAnimAction::set_animname(const ::std::string& value) {
  set_has_animname();
  if (animname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    animname_ = new ::std::string;
  }
  animname_->assign(value);
  // @@protoc_insertion_point(field_set:unity.PlayAnimAction.animname)
}
inline void PlayAnimAction::set_animname(const char* value) {
  set_has_animname();
  if (animname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    animname_ = new ::std::string;
  }
  animname_->assign(value);
  // @@protoc_insertion_point(field_set_char:unity.PlayAnimAction.animname)
}
inline void PlayAnimAction::set_animname(const char* value, size_t size) {
  set_has_animname();
  if (animname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    animname_ = new ::std::string;
  }
  animname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:unity.PlayAnimAction.animname)
}
inline ::std::string* PlayAnimAction::mutable_animname() {
  set_has_animname();
  if (animname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    animname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:unity.PlayAnimAction.animname)
  return animname_;
}
inline ::std::string* PlayAnimAction::release_animname() {
  clear_has_animname();
  if (animname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = animname_;
    animname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PlayAnimAction::set_allocated_animname(::std::string* animname) {
  if (animname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete animname_;
  }
  if (animname) {
    set_has_animname();
    animname_ = animname;
  } else {
    clear_has_animname();
    animname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:unity.PlayAnimAction.animname)
}

// -------------------------------------------------------------------

// StopAnimAction

// optional int32 objectid = 1 [default = 0];
inline bool StopAnimAction::has_objectid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StopAnimAction::set_has_objectid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StopAnimAction::clear_has_objectid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StopAnimAction::clear_objectid() {
  objectid_ = 0;
  clear_has_objectid();
}
inline ::google::protobuf::int32 StopAnimAction::objectid() const {
  // @@protoc_insertion_point(field_get:unity.StopAnimAction.objectid)
  return objectid_;
}
inline void StopAnimAction::set_objectid(::google::protobuf::int32 value) {
  set_has_objectid();
  objectid_ = value;
  // @@protoc_insertion_point(field_set:unity.StopAnimAction.objectid)
}

// optional string animname = 2;
inline bool StopAnimAction::has_animname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StopAnimAction::set_has_animname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StopAnimAction::clear_has_animname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StopAnimAction::clear_animname() {
  if (animname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    animname_->clear();
  }
  clear_has_animname();
}
inline const ::std::string& StopAnimAction::animname() const {
  // @@protoc_insertion_point(field_get:unity.StopAnimAction.animname)
  return *animname_;
}
inline void StopAnimAction::set_animname(const ::std::string& value) {
  set_has_animname();
  if (animname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    animname_ = new ::std::string;
  }
  animname_->assign(value);
  // @@protoc_insertion_point(field_set:unity.StopAnimAction.animname)
}
inline void StopAnimAction::set_animname(const char* value) {
  set_has_animname();
  if (animname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    animname_ = new ::std::string;
  }
  animname_->assign(value);
  // @@protoc_insertion_point(field_set_char:unity.StopAnimAction.animname)
}
inline void StopAnimAction::set_animname(const char* value, size_t size) {
  set_has_animname();
  if (animname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    animname_ = new ::std::string;
  }
  animname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:unity.StopAnimAction.animname)
}
inline ::std::string* StopAnimAction::mutable_animname() {
  set_has_animname();
  if (animname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    animname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:unity.StopAnimAction.animname)
  return animname_;
}
inline ::std::string* StopAnimAction::release_animname() {
  clear_has_animname();
  if (animname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = animname_;
    animname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void StopAnimAction::set_allocated_animname(::std::string* animname) {
  if (animname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete animname_;
  }
  if (animname) {
    set_has_animname();
    animname_ = animname;
  } else {
    clear_has_animname();
    animname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:unity.StopAnimAction.animname)
}

// -------------------------------------------------------------------

// FRAME

// optional int32 frame = 1 [default = 0];
inline bool FRAME::has_frame() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FRAME::set_has_frame() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FRAME::clear_has_frame() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FRAME::clear_frame() {
  frame_ = 0;
  clear_has_frame();
}
inline ::google::protobuf::int32 FRAME::frame() const {
  // @@protoc_insertion_point(field_get:unity.FRAME.frame)
  return frame_;
}
inline void FRAME::set_frame(::google::protobuf::int32 value) {
  set_has_frame();
  frame_ = value;
  // @@protoc_insertion_point(field_set:unity.FRAME.frame)
}

// optional int32 detal = 2 [default = 0];
inline bool FRAME::has_detal() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FRAME::set_has_detal() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FRAME::clear_has_detal() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FRAME::clear_detal() {
  detal_ = 0;
  clear_has_detal();
}
inline ::google::protobuf::int32 FRAME::detal() const {
  // @@protoc_insertion_point(field_get:unity.FRAME.detal)
  return detal_;
}
inline void FRAME::set_detal(::google::protobuf::int32 value) {
  set_has_detal();
  detal_ = value;
  // @@protoc_insertion_point(field_set:unity.FRAME.detal)
}

// repeated .unity.MoveAction move = 3;
inline int FRAME::move_size() const {
  return move_.size();
}
inline void FRAME::clear_move() {
  move_.Clear();
}
inline const ::unity::MoveAction& FRAME::move(int index) const {
  // @@protoc_insertion_point(field_get:unity.FRAME.move)
  return move_.Get(index);
}
inline ::unity::MoveAction* FRAME::mutable_move(int index) {
  // @@protoc_insertion_point(field_mutable:unity.FRAME.move)
  return move_.Mutable(index);
}
inline ::unity::MoveAction* FRAME::add_move() {
  // @@protoc_insertion_point(field_add:unity.FRAME.move)
  return move_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::unity::MoveAction >&
FRAME::move() const {
  // @@protoc_insertion_point(field_list:unity.FRAME.move)
  return move_;
}
inline ::google::protobuf::RepeatedPtrField< ::unity::MoveAction >*
FRAME::mutable_move() {
  // @@protoc_insertion_point(field_mutable_list:unity.FRAME.move)
  return &move_;
}

// repeated .unity.InstantiateAction instantiate = 4;
inline int FRAME::instantiate_size() const {
  return instantiate_.size();
}
inline void FRAME::clear_instantiate() {
  instantiate_.Clear();
}
inline const ::unity::InstantiateAction& FRAME::instantiate(int index) const {
  // @@protoc_insertion_point(field_get:unity.FRAME.instantiate)
  return instantiate_.Get(index);
}
inline ::unity::InstantiateAction* FRAME::mutable_instantiate(int index) {
  // @@protoc_insertion_point(field_mutable:unity.FRAME.instantiate)
  return instantiate_.Mutable(index);
}
inline ::unity::InstantiateAction* FRAME::add_instantiate() {
  // @@protoc_insertion_point(field_add:unity.FRAME.instantiate)
  return instantiate_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::unity::InstantiateAction >&
FRAME::instantiate() const {
  // @@protoc_insertion_point(field_list:unity.FRAME.instantiate)
  return instantiate_;
}
inline ::google::protobuf::RepeatedPtrField< ::unity::InstantiateAction >*
FRAME::mutable_instantiate() {
  // @@protoc_insertion_point(field_mutable_list:unity.FRAME.instantiate)
  return &instantiate_;
}

// repeated .unity.DestroyAction destroy = 5;
inline int FRAME::destroy_size() const {
  return destroy_.size();
}
inline void FRAME::clear_destroy() {
  destroy_.Clear();
}
inline const ::unity::DestroyAction& FRAME::destroy(int index) const {
  // @@protoc_insertion_point(field_get:unity.FRAME.destroy)
  return destroy_.Get(index);
}
inline ::unity::DestroyAction* FRAME::mutable_destroy(int index) {
  // @@protoc_insertion_point(field_mutable:unity.FRAME.destroy)
  return destroy_.Mutable(index);
}
inline ::unity::DestroyAction* FRAME::add_destroy() {
  // @@protoc_insertion_point(field_add:unity.FRAME.destroy)
  return destroy_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::unity::DestroyAction >&
FRAME::destroy() const {
  // @@protoc_insertion_point(field_list:unity.FRAME.destroy)
  return destroy_;
}
inline ::google::protobuf::RepeatedPtrField< ::unity::DestroyAction >*
FRAME::mutable_destroy() {
  // @@protoc_insertion_point(field_mutable_list:unity.FRAME.destroy)
  return &destroy_;
}

// repeated .unity.ScaleAction scale = 6;
inline int FRAME::scale_size() const {
  return scale_.size();
}
inline void FRAME::clear_scale() {
  scale_.Clear();
}
inline const ::unity::ScaleAction& FRAME::scale(int index) const {
  // @@protoc_insertion_point(field_get:unity.FRAME.scale)
  return scale_.Get(index);
}
inline ::unity::ScaleAction* FRAME::mutable_scale(int index) {
  // @@protoc_insertion_point(field_mutable:unity.FRAME.scale)
  return scale_.Mutable(index);
}
inline ::unity::ScaleAction* FRAME::add_scale() {
  // @@protoc_insertion_point(field_add:unity.FRAME.scale)
  return scale_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::unity::ScaleAction >&
FRAME::scale() const {
  // @@protoc_insertion_point(field_list:unity.FRAME.scale)
  return scale_;
}
inline ::google::protobuf::RepeatedPtrField< ::unity::ScaleAction >*
FRAME::mutable_scale() {
  // @@protoc_insertion_point(field_mutable_list:unity.FRAME.scale)
  return &scale_;
}

// repeated .unity.RorateAction rorate = 7;
inline int FRAME::rorate_size() const {
  return rorate_.size();
}
inline void FRAME::clear_rorate() {
  rorate_.Clear();
}
inline const ::unity::RorateAction& FRAME::rorate(int index) const {
  // @@protoc_insertion_point(field_get:unity.FRAME.rorate)
  return rorate_.Get(index);
}
inline ::unity::RorateAction* FRAME::mutable_rorate(int index) {
  // @@protoc_insertion_point(field_mutable:unity.FRAME.rorate)
  return rorate_.Mutable(index);
}
inline ::unity::RorateAction* FRAME::add_rorate() {
  // @@protoc_insertion_point(field_add:unity.FRAME.rorate)
  return rorate_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::unity::RorateAction >&
FRAME::rorate() const {
  // @@protoc_insertion_point(field_list:unity.FRAME.rorate)
  return rorate_;
}
inline ::google::protobuf::RepeatedPtrField< ::unity::RorateAction >*
FRAME::mutable_rorate() {
  // @@protoc_insertion_point(field_mutable_list:unity.FRAME.rorate)
  return &rorate_;
}

// repeated .unity.PlayAnimAction play_anim = 8;
inline int FRAME::play_anim_size() const {
  return play_anim_.size();
}
inline void FRAME::clear_play_anim() {
  play_anim_.Clear();
}
inline const ::unity::PlayAnimAction& FRAME::play_anim(int index) const {
  // @@protoc_insertion_point(field_get:unity.FRAME.play_anim)
  return play_anim_.Get(index);
}
inline ::unity::PlayAnimAction* FRAME::mutable_play_anim(int index) {
  // @@protoc_insertion_point(field_mutable:unity.FRAME.play_anim)
  return play_anim_.Mutable(index);
}
inline ::unity::PlayAnimAction* FRAME::add_play_anim() {
  // @@protoc_insertion_point(field_add:unity.FRAME.play_anim)
  return play_anim_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::unity::PlayAnimAction >&
FRAME::play_anim() const {
  // @@protoc_insertion_point(field_list:unity.FRAME.play_anim)
  return play_anim_;
}
inline ::google::protobuf::RepeatedPtrField< ::unity::PlayAnimAction >*
FRAME::mutable_play_anim() {
  // @@protoc_insertion_point(field_mutable_list:unity.FRAME.play_anim)
  return &play_anim_;
}

// repeated .unity.StopAnimAction stop_anim = 9;
inline int FRAME::stop_anim_size() const {
  return stop_anim_.size();
}
inline void FRAME::clear_stop_anim() {
  stop_anim_.Clear();
}
inline const ::unity::StopAnimAction& FRAME::stop_anim(int index) const {
  // @@protoc_insertion_point(field_get:unity.FRAME.stop_anim)
  return stop_anim_.Get(index);
}
inline ::unity::StopAnimAction* FRAME::mutable_stop_anim(int index) {
  // @@protoc_insertion_point(field_mutable:unity.FRAME.stop_anim)
  return stop_anim_.Mutable(index);
}
inline ::unity::StopAnimAction* FRAME::add_stop_anim() {
  // @@protoc_insertion_point(field_add:unity.FRAME.stop_anim)
  return stop_anim_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::unity::StopAnimAction >&
FRAME::stop_anim() const {
  // @@protoc_insertion_point(field_list:unity.FRAME.stop_anim)
  return stop_anim_;
}
inline ::google::protobuf::RepeatedPtrField< ::unity::StopAnimAction >*
FRAME::mutable_stop_anim() {
  // @@protoc_insertion_point(field_mutable_list:unity.FRAME.stop_anim)
  return &stop_anim_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace unity

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_unityframe_2eproto__INCLUDED
